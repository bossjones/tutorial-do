- name: Ensures /root/.ssh dir exists
  file: path=/root/.ssh
        state=directory
        owner=root
        group=root
        mode=0600
- copy: content={{ GITLAB_PRIV_KEY }} dest=/root/.ssh/id_rsa owner=root group=root mode=0400

# s1-hardening
- git: repo={{ GITLAB_DEPLOY_SETUP_URL }} version={{ GITLAB_DEPLOY_SETUP_BRANCH }}
        dest=/root/{{ GITLAB_DEPLOY_SETUP_REPO_NAME }}
        accept_hostkey=yes
        clone=yes
        force=yes
        key_file=/root/.ssh/id_rsa

- git: repo={{ GITLAB_DEPLOY_LOGS_URL }} version={{ GITLAB_DEPLOY_LOGS_BRANCH }}
        dest=/root/{{ GITLAB_DEPLOY_LOGS_REPO_NAME }}
        accept_hostkey=yes
        clone=yes
        force=yes
        key_file=/root/.ssh/id_rsa

- git: repo={{ GITLAB_INFRA_AS_CODE_URL }} version=master
        dest=/root/temp/{{ GITLAB_INFRA_AS_CODE_REPO_NAME }}
        accept_hostkey=yes
        clone=yes
        force=yes
        key_file=/root/.ssh/id_rsa

- git: repo={{ GIT_REPO_HARDENING }} version=master
        dest=/root/temp/hardening
        accept_hostkey=yes
        clone=yes
        force=yes
        key_file=/root/.ssh/id_rsa

# s2-main-config

- name: Ensures /root/.cloudflare dir exists
  file: path=/root/.cloudflare
        state=directory
        owner=root
        group=root
        mode=0600

- lineinfile:
    name: /root/.cloudflare/env
    line: "{{ ENV_CF_API_KEY }}"
    create: yes
    insertbefore: "BOF"

- lineinfile:
    name: /root/.cloudflare/env
    line: "{{ ENV_CF_API_EMAIL }}"
    create: yes
    insertafter: "EOF"

- name: "1) Set timezone to America/New_York"
  timezone:
    name: "America/New_York"

- name: "2) Change root password"
  user: name=root update_password=always password={{ ROOT_PASSWORD }}

- name: "3) Disallow password authentication"
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^PasswordAuthentication"
              line="PasswordAuthentication no"
              state=present
  notify: Restart ssh

- name: "4) Remove unnecessary packages"
  apt: name={{ item }} state=absent purge=yes
  with_items:
    - nfs-kernel-server
    - nfs-common
    - portmap
    - rpcbind
    - autofs

#- name: "5) Run kickoff.sh (deploy-setup)"
#  shell: ./kickoff.sh > kickoff.log
#  args:
#    chdir: /root/deploy-setup/functions


# https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back
- name: restart machine
  command: bash -c 'sleep 1 ; shutdown -r now "Ansible updates triggered a reboot"'
  async: 2
  poll: 0
  ignore_errors: true
# failed_when: false

# Possible solution for bastion host usage: https://groups.google.com/forum/#!topic/ansible-project/7aT5Rq4mmBM
- name: "waiting for server to come back (max 10 minutes)"
  local_action: 
    module: wait_for
    host: '{{ ansible_host | default(inventory_hostname) }}'
    port: 22
    search_regex: OpenSSH
    state: started
    delay: 30
    timeout: 600
  become: false


#- name: "6) reboot the system"
#  command: /sbin/shutdown -r now "reboot the system " && sleep 1

#- name: "7) Waiting for server to come back"
#  local_action: wait_for host={{ ansible_default_ipv4.address }} port=22 state=started delay=60 timeout=1000
#  sudo: false